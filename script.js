document.addEventListener('DOMContentLoaded', () => {

    // --- 1. –¢–∞–π–º–µ—Ä –¥–Ω–µ–π ---
    const daysCounter = document.getElementById('days-counter');
    const startDate = new Date('2025-09-30T00:00:00');

    function updateTimer() {
        const currentDate = new Date();
        const diffTime = currentDate - startDate;
        const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
        daysCounter.textContent = diffDays >= 0 ? diffDays : 0;
    }
    updateTimer();
    setInterval(updateTimer, 1000 * 60 * 60); // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑ –≤ —á–∞—Å, –¥–ª—è –¥–Ω–µ–π —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ

    // --- 2. –ê–Ω–∏–º–∞—Ü–∏—è —Ñ–æ–Ω–∞ ---
    const background = document.getElementById('background-animation');
    const elements = ['‚ù§', 'love', 'forever', 'amor', '‚ú®', 'üíï', 'I love you'];

    function createFloatingElement() {
        const element = document.createElement('span');
        element.classList.add('floating-element');
        
        element.textContent = elements[Math.floor(Math.random() * elements.length)];
        element.style.left = `${Math.random() * 100}vw`;
        element.style.fontSize = `${1 + Math.random() * 1.5}rem`;
        element.style.animationDuration = `${10 + Math.random() * 10}s`;
        element.style.animationDelay = `${Math.random() * 5}s`;

        background.appendChild(element);

        setTimeout(() => {
            element.remove();
        }, 20000);
    }
    setInterval(createFloatingElement, 700);


    // --- 3. –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä ---
    // –í–ê–ñ–ù–û: –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ GitHub Pages –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.
    // –°–∞–π—Ç —Å—Ç–∞—Ç–∏—á–Ω—ã–π. –¢—Ä–µ–∫–∏ –Ω—É–∂–Ω–æ –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–ª–æ–∂–∏—Ç—å –≤ –ø–∞–ø–∫—É 'music'.
    const playlistData = [
        { title: '–í–∞—à–∞ –ª—é–±–∏–º–∞—è –ø–µ—Å–Ω—è 1', src: 'music/track1.mp3' },
        { title: '–†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π —Ç—Ä–µ–∫ 2', src: 'music/track2.mp3' },
        { title: '–ü–µ—Å–Ω—è –≤–∞—à–µ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 3', src: 'music/track3.mp3' },
    ];

    const audio = document.getElementById('audio-source');
    const trackTitle = document.getElementById('track-title');
    const playBtn = document.getElementById('play-btn');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const playlistElement = document.getElementById('playlist');

    let currentTrackIndex = 0;
    let isPlaying = false;

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ HTML
    playlistData.forEach((track, index) => {
        const li = document.createElement('li');
        li.textContent = track.title;
        li.dataset.index = index;
        playlistElement.appendChild(li);
    });
    
    const playlistItems = document.querySelectorAll('#playlist li');

    function loadTrack(index) {
        const track = playlistData[index];
        audio.src = track.src;
        trackTitle.textContent = track.title;
        currentTrackIndex = index;
        updatePlaylistUI();
    }

    function updatePlaylistUI() {
        playlistItems.forEach((item, index) => {
            if (index === currentTrackIndex) {
                item.classList.add('active');
            } else {
                item.classList.remove('active');
            }
        });
    }

    function playTrack() {
        isPlaying = true;
        audio.play();
        playBtn.textContent = '‚ùö‚ùö';
    }

    function pauseTrack() {
        isPlaying = false;
        audio.pause();
        playBtn.textContent = '‚ñ∂';
    }

    playBtn.addEventListener('click', () => {
        if (isPlaying) {
            pauseTrack();
        } else {
            playTrack();
        }
    });

    prevBtn.addEventListener('click', () => {
        currentTrackIndex = (currentTrackIndex - 1 + playlistData.length) % playlistData.length;
        loadTrack(currentTrackIndex);
        playTrack();
    });

    nextBtn.addEventListener('click', () => {
        currentTrackIndex = (currentTrackIndex + 1) % playlistData.length;
        loadTrack(currentTrackIndex);
        playTrack();
    });

    playlistItems.forEach(item => {
        item.addEventListener('click', () => {
            loadTrack(parseInt(item.dataset.index));
            playTrack();
        });
    });
    
    audio.addEventListener('ended', () => {
        nextBtn.click(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
    });

    loadTrack(0); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

    // --- 4. –ö–∞—Ä—É—Å–µ–ª—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π ---
    const slideContainer = document.querySelector('.carousel-slide');
    const images = document.querySelectorAll('.carousel-slide img');
    const prevCarouselBtn = document.getElementById('carousel-prev');
    const nextCarouselBtn = document.getElementById('carousel-next');

    let carouselIndex = 0;
    const totalImages = images.length;

    function updateCarousel() {
        slideContainer.style.transform = `translateX(-${carouselIndex * 100}%)`;
    }

    nextCarouselBtn.addEventListener('click', () => {
        carouselIndex = (carouselIndex + 1) % totalImages;
        updateCarousel();
    });

    prevCarouselBtn.addEventListener('click', () => {
        carouselIndex = (carouselIndex - 1 + totalImages) % totalImages;
        updateCarousel();
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–∞—Ä—É—Å–µ–ª–∏
    setInterval(() => {
        nextCarouselBtn.click();
    }, 5000); // –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

  
});

